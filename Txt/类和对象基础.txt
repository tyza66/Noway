一、类和对象
对象：一切皆对象。
状态：对象的静态特征，属性
行为：动态特征，操作、功能，方法

类：对象的模板。一类对象的共性。
类的成员：属性――成员变量（基本类型、引用类型），成员方法


对象和类的关系：
实例：一个对象就是一个类的实例。
类的实例化：通过类生成对象的过程。


举例：我要开车
分析：
先找对象：“我”、“我的车mycar”
行为：开车――对象之间的关系


程序中：人（类）、车（类）――方法：play()
class Car{
   //成员变量
   //成员方法
   void play(){  }
}

Person wo=new Person();
Car mycar=new Car();

//人开车
mycar.paly();

对象间的联系：消息传递机制实现。

二、面向对象的基本特征
封装、继承、多态

封装：类：一个模块，将数据和对数据进行处理的方法放在了类中，隐藏了类的内部实现。
          两个部分：接口（可见）、实现（不可见）
          两种保护：保护对象、保护程序

继承：子类可从父类继承共有的属性、方法，增加特性――程序可复用、可扩展
类之间的关系：继承、组合、关联

多态：方法名相同，方法实现不同
1、静态多态：方法重载――同一个类中，有同名方法，参数个数、参数类型不同，编译器完成方法名和方法体的绑定
举例：
数值类：add1(int,int)、add2(double,double)
              add(int,int)、 add(int,int，int)、add(double,double)

              add(2,3);
              add(2,3,4);
2、动态多态、运行时多态：方法覆盖：父类和子类
举例：
父亲：开车（自行车）
儿子：开车（把这个方法的功能改写成开汽车）   

三、面向对象的优势
易维护（耦合度低）、可重用（ＡＰＩ）、可扩展（继承）   
